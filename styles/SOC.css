* {
	box-sizing: border-box;                         /* the "box-sizing" property has only one useful value "border-box", which tell the Browser to include content, padding, and borders in the height and width of the element */
	transition:all 1s;                               /* << While no one is looking, let's have a bit of fun. I don't recommend this for production, but try adding this to your responsive project. Here, we are using the CSS universal selector * to select everything and then setting a transition on all properties for 1 second (1s). As we have omitted to specify the timing function, ease will be used by default and there will be no delay as again, a default of 0 is assumed if an alternative value is not added. The effect? Well, try resizing your browser window and most things (links, hover states, and the like) behave as you would expect. However, because everything transitions, it also includes any rules within media queries, so as the browser window is resized, elements sort of flow from one state to the next. Is it essential? Absolutely not! Is it fun to watch and play around with? Certainly! Now, remove that rule before your mom sees it! >>(B.F) */
}

body {
	padding: 1rem .5rem;
	font-size: 1.3rem;
	line-height: 1.2;
	max-width: 60rem;
	margin: 0 auto;
	color: #333;
}

img {
	max-width: 100%;
}

.Header {
	text-align: center;
	border-bottom: 8px double #f9f9f9;
	margin-bottom: 2rem;
	padding-bottom: 1rem;
}

.Strap {
	font-size: 1rem;
}


.MoneyShot {
	position: relative;
}

.MoneyShotImg {
	border: 6px solid #e8cfa9;
	border-radius: 4px;
}

.LogoWrapper {
	display: block;
}

.ImageCaption {
	font-size: .75rem;
	position: absolute;
	bottom: .5rem;
	right: 1rem;
}

.IntroText {
	font-size: 1.8rem;
	font-style: italic;
}

.MethodWrapper li {
	padding: .4rem 0;
}

.MethodWrapper li:after {
	content: "✼";
	display: block;
	text-align: center;
	margin: 1rem 0 .5rem 0;
	color: #eee;
}

@media screen and (min-width: 50rem) {                      /* the "rem" unit "root em", in the media query at rule : equivalent to the font size of the root element. << Don't set breakpoints to popular device widths : 'Breakpoint' is the term used to define the point in which a responsive design should change significantly. When people first started making use of media queries it was common to see breakpoints in designs built specifically around the popular devices of the day. At the time it was typically iPhone (320px x 480px) and iPad (768px x 1024px) that defined these 'breakpoints'. That practice was a bad choice then, and it would be an even worse one now. The problem is that by doing that we are catering a design to a specific screen size. We want a responsive design—something that is agnostic of the screen size viewing it; not something that only looks at its best at specific sizes. >>(B.F) */
	body {
		border-left: 4px solid #f9f9f9;
		border-right: 4px solid #f9f9f9;
		padding: 1rem 2rem;
	}

	.IntroWrapper {
		display: table;
		table-layout: fixed;
		width: 100%;
	}

	.MoneyShot,
	.IntroText {
		display: table-cell;
		width: 50%;
		vertical-align: middle;
		text-align: center;
	}

	.IntroText {
		padding: .5rem;
		font-size: 2.5rem;
		text-align: left;
		position: relative;
	}

	.Ingredients {
		font-size: .9rem;
		float: right;
		padding: 1rem;
		margin: 0 0 .5rem 1rem;
		border-radius: 3px;
		background-color: #ffffdf;
		border: 2px solid #e8cfa9;
	}

	.Ingredients h3 {
		margin: 0;
	}
	
	@supports (transform:scale(2)) and (clip:rect(30px,400px,200px,150px)) {				/* the "supports" at rule : if the Browser supports the two properties and their definitions, the style block will be applied */
	  .MoneyShotImg:hover {
	    clip: rect(30px,400px,200px,150px);
	    position: absolute;
	    left: -25%;
	    right: 33%;
	    top:5%;
	    transform: scale(2);
	  }
	  picture:hover ~ .ImageCaption {
	    opacity:0;
	  }
	}
	
}

@media only screen and (max-width: 25rem) {                   /* {LN_0} */
    .ImageCaption {
        margin-left: 0.5rem;
        margin-bottom: 0.5rem;
        color: white;
        text-shadow: 1px 1px black;
    }
}